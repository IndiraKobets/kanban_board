{"version":3,"sources":["AddTaskModal.js","Task.js","Column.js","AddColumnModal.js","App.js","serviceWorker.js","index.js"],"names":["AddTaskModal","props","useState","isModalOpen","setIsModalOpen","newTitle","setNewTitle","newPriority","setNewPriority","newStatus","setNewStatus","Button","onClick","Modal","isOpen","ModalHeader","ModalBody","Label","Input","type","value","onChange","e","target","Row","Col","ModalFooter","addNewTask","trash","className","width","height","viewBox","fill","xmlns","d","fillRule","pen","Task","task","changeTaskStatus","deleteTask","editTodo","name","editTask","setEditTask","isEditMode","setIsEditMode","Card","CardBody","size","id","Alert","color","priority","status","Column","tasks","column","title","filter","el","sort","a","b","map","key","AddColumnModal","addNewColumn","App","initialTasks","uuidv4","setTasks","columnList","columns","setColumns","statuses","priorities","taskId","direction","newTasks","indexOf","newTask","newName","newList","Container","newColumn","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sVA4DeA,MAzDf,SAAsBC,GAAQ,IAAD,EAEaC,oBAAS,GAFtB,mBAElBC,EAFkB,KAELC,EAFK,OAIOF,mBAAS,IAJhB,mBAIlBG,EAJkB,KAIRC,EAJQ,OAMaJ,mBAAS,GANtB,mBAMlBK,EANkB,KAMLC,EANK,OAQSN,mBAAS,SARlB,mBAQlBO,EARkB,KAQPC,EARO,KAgBzB,OACI,oCACI,kBAACC,EAAA,EAAD,CAAQC,QAAS,kBAAMR,GAAe,KAAtC,gBACA,kBAACS,EAAA,EAAD,CAAOC,OAAQX,GACX,kBAACY,EAAA,EAAD,qBACA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,kBACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,OAAOC,MAAOf,EAAUgB,SAAU,SAAAC,GAAC,OAAIhB,EAAYgB,EAAEC,OAAOH,UAExE,kBAACI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACR,EAAA,EAAD,iBACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,SAASC,MAAOb,EAAac,SAAU,SAAAC,GAAC,OAAId,EAAec,EAAEC,OAAOH,SAC5E,4BAAQA,MAAO,GAAf,OACA,4BAAQA,MAAO,GAAf,UACA,4BAAQA,MAAO,GAAf,UAIR,kBAACK,EAAA,EAAD,KACI,kBAACR,EAAA,EAAD,eACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,SAASC,MAAOX,EAAWY,SAAU,SAAAC,GAAC,OAAIZ,EAAaY,EAAEC,OAAOH,SACxE,4BAAQA,MAAO,SAAf,SACA,4BAAQA,MAAO,eAAf,eACA,4BAAQA,MAAO,UAAf,UACA,4BAAQA,MAAO,QAAf,YAMhB,kBAACM,EAAA,EAAD,KACI,kBAACf,EAAA,EAAD,CAAQC,QAtCC,WACrBR,GAAe,GACfH,EAAM0B,WAAWtB,EAAUE,EAAaE,GACxCD,EAAe,MAmCH,UACC,IACD,kBAACG,EAAA,EAAD,CAAQC,QAAS,kBAAMR,GAAe,KAAtC,c,wBCjDdwB,EAAS,yBAAKC,UAAU,cAAcC,MAAM,MAAMC,OAAO,MAAMC,QAAQ,YAAYC,KAAK,eAC1EC,MAAM,8BACtB,0BACIC,EAAE,oKACN,0BAAMC,SAAS,UACTD,EAAE,gPAGNE,EAAO,yBAAKR,UAAU,eAAeC,MAAM,MAAMC,OAAO,MAAMC,QAAQ,YAAYC,KAAK,eAC3EC,MAAM,8BACpB,0BAAME,SAAS,UACTD,EAAE,mKACR,0BAAMC,SAAS,UACTD,EAAE,2KAqEGG,MAlEf,SAAcrC,GAAQ,IACXsC,EAAgDtC,EAAhDsC,KAAMC,EAA0CvC,EAA1CuC,iBAAkBC,EAAwBxC,EAAxBwC,WAAYC,EAAYzC,EAAZyC,SAD1B,EAGexC,mBAASqC,EAAKI,MAH7B,mBAGVC,EAHU,KAGAC,EAHA,OAImB3C,oBAAS,GAJ5B,mBAIV4C,EAJU,KAIEC,EAJF,KAiBjB,OACI,6BACI,kBAACtB,EAAA,EAAD,KACI,6BACI,kBAACuB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAGKH,EACG,oCACI,kBAAC5B,EAAA,EAAD,CAAOC,KAAK,OAAOC,MAAOwB,EAAUvB,SAAU,SAAAC,GAAC,OAAIuB,EAAYvB,EAAEC,OAAOH,UACxE,kBAACT,EAAA,EAAD,CAAQuC,KAAK,KAAKtC,QAhBxB,WACtB8B,EAASH,EAAKY,GAAIP,GAClBG,GAAc,KAcc,SAGJ,oCACKR,EAAKI,KACN,6BACI,kBAAChC,EAAA,EAAD,CAAQuC,KAAK,KAAKtC,QAAS,kBAAMmC,GAAc,KAAQV,GACvD,kBAAC1B,EAAA,EAAD,CAAQuC,KAAK,KAAKtC,QA3BrC,WACb6B,EAAWF,EAAKY,MA0BsDvB,KAKlD,6BACA,kBAACwB,EAAA,EAAD,CAAOC,MAnCX,CAAC,UAAW,UAAW,UAmCOd,EAAKe,WAC1Bf,EAAKe,SACa,IAAlBf,EAAKe,UACN,kBAAC3C,EAAA,EAAD,CAAQuC,KAAK,KAAKtC,QAAS,kBAAM4B,EAAiBD,EAAKY,GAAI,QAA3D,UAEC,IACkB,IAAlBZ,EAAKe,UACN,kBAAC3C,EAAA,EAAD,CAAQuC,KAAK,KAAKtC,QAAS,kBAAM4B,EAAiBD,EAAKY,GAAI,UAA3D,YAKR,kBAACF,EAAA,EAAD,KACqB,UAAhBV,EAAKgB,QACN,kBAAC5C,EAAA,EAAD,CAAQC,QAAS,kBAAM4B,EAAiBD,EAAKY,GAAI,UAAjD,UACiB,SAAhBZ,EAAKgB,QACN,kBAAC5C,EAAA,EAAD,CAAQC,QAAS,kBAAM4B,EAAiBD,EAAKY,GAAI,WAAjD,gBCnDbK,MAtBf,SAAgBvD,GAAQ,IAEfwD,EAAyDxD,EAAzDwD,MAAOC,EAAkDzD,EAAlDyD,OAAQlB,EAA0CvC,EAA1CuC,iBAAkBC,EAAwBxC,EAAxBwC,WAAYC,EAAYzC,EAAZyC,SAEpD,OACI,6BACE,kBAACjB,EAAA,EAAD,KACE,4BAAKiC,EAAOC,OACXF,EAAMG,QAAO,SAAAC,GAAE,OAAIA,EAAGN,SAAWG,EAAOH,UACpCO,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEV,SAAWS,EAAET,YAC9BW,KAAI,SAAAJ,GAAE,OAAI,kBAAC,EAAD,CAAMK,IAAKL,EAAGV,GACRZ,KAAMsB,EACNrB,iBAAkBA,EAClBC,WAAYA,EACZC,SAAUA,U,gBCiB1ByB,MAhCf,SAAwBlE,GAAQ,IAAD,EAEWC,oBAAS,GAFpB,mBAEpBC,EAFoB,KAEPC,EAFO,OAIKF,mBAAS,IAJd,mBAIpBG,EAJoB,KAIVC,EAJU,KAY3B,OACI,oCACI,kBAACK,EAAA,EAAD,CAAQC,QAAS,kBAAMR,GAAe,KAAtC,kBACA,kBAACS,EAAA,EAAD,CAAOC,OAAQX,GACX,kBAACY,EAAA,EAAD,uBACA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,kBACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,OAAOC,MAAOf,EAAUgB,SAAU,SAAAC,GAAC,OAAIhB,EAAYgB,EAAEC,OAAOH,WAG5E,kBAACM,EAAA,EAAD,KACI,kBAACf,EAAA,EAAD,CAAQC,QAhBC,WACrBR,GAAe,GACfH,EAAMmE,aAAa/D,KAcP,UACC,IACD,kBAACM,EAAA,EAAD,CAAQC,QAAS,kBAAMR,GAAe,KAAtC,cC8ELiE,MAlGf,WAEI,IAAMC,EAAe,CACjB,CAACnB,GAAIoB,cAAU5B,KAAM,cAAeY,OAAQ,QAASD,SAAU,GAC/D,CAACH,GAAIoB,cAAU5B,KAAM,aAAcY,OAAQ,cAAeD,SAAU,GACpE,CAACH,GAAIoB,cAAU5B,KAAM,sBAAuBY,OAAQ,SAAUD,SAAU,GACxE,CAACH,GAAIoB,cAAU5B,KAAM,WAAYY,OAAQ,OAAQD,SAAU,GAC3D,CAACH,GAAIoB,cAAU5B,KAAM,WAAYY,OAAQ,QAASD,SAAU,GAC5D,CAACH,GAAIoB,cAAU5B,KAAM,cAAeY,OAAQ,cAAeD,SAAU,GACrE,CAACH,GAAIoB,cAAU5B,KAAM,cAAeY,OAAQ,SAAUD,SAAU,GAChE,CAACH,GAAIoB,cAAU5B,KAAM,gBAAiBY,OAAQ,OAAQD,SAAU,IAVzD,EAaepD,mBAASoE,GAbxB,mBAaJb,EAbI,KAaGe,EAbH,KAeLC,EAAa,CACf,CAACtB,GAAIoB,cAAUZ,MAAO,QAASJ,OAAQ,SACvC,CAACJ,GAAIoB,cAAUZ,MAAO,cAAeJ,OAAQ,eAC7C,CAACJ,GAAIoB,cAAUZ,MAAO,SAAUJ,OAAQ,UACxC,CAACJ,GAAIoB,cAAUZ,MAAO,OAAQJ,OAAQ,SAnB/B,EAuBmBrD,mBAASuE,GAvB5B,mBAuBJC,EAvBI,KAuBKC,EAvBL,KAyBLC,EAAW,CAAC,QAAS,cAAe,SAAU,QAE9CC,EAAa,CAAC,EAAG,EAAG,GAIpBrC,EAAmB,SAACsC,EAAQC,GAC9B,IAAMC,EAAWvB,EAAMQ,KAAI,SAAAJ,GAOvB,OANIA,EAAGV,KAAO2B,IACQ,UAAdC,IAAuBlB,EAAGN,OAASqB,EAASA,EAASK,QAAQpB,EAAGN,QAAU,IAC5D,SAAdwB,IAAsBlB,EAAGN,OAASqB,EAASA,EAASK,QAAQpB,EAAGN,QAAU,IAC3D,OAAdwB,IAAoBlB,EAAGP,SAAWuB,EAAWA,EAAWI,QAAQpB,EAAGP,UAAY,IACjE,SAAdyB,IAAsBlB,EAAGP,SAAWuB,EAAWA,EAAWI,QAAQpB,EAAGP,UAAY,KAElFO,KAEXW,EAASQ,IAQPvC,EAAa,SAACqC,GAChB,IAAMI,EAAUzB,EAAMG,QAAO,SAAAC,GAAE,OAAIA,EAAGV,KAAO2B,KAC7CN,EAASU,IAUPxC,EAAW,SAACS,EAAIgC,GAClB,IAAMC,EAAU,YAAI3B,GAAOQ,KAAI,SAAAJ,GACvB,OAAIA,EAAGV,KAAOA,EACH,2BAAIU,GAAX,IAAelB,KAAMwC,IAClBtB,KAEXW,EAASY,IAGjB,OACI,yBAAKvD,UAAU,OAEX,kBAACwD,EAAA,EAAD,KAEI,kBAAC,EAAD,CAAc1D,WA/BP,SAACwD,EAAS5E,EAAaE,GACtC,IAAMyE,EAAU,CAAC/B,GAAIoB,cAAU5B,KAAMwC,EAAS5B,OAAQ9C,EAAW6C,SAAU/C,GAC3EiE,EAAS,GAAD,mBAAKf,GAAL,CAAYyB,QA8BZ,kBAAC,EAAD,CAAgBd,aApBP,SAAC/D,EAAUI,GAC5B,IAAM6E,EAAY,CAACnC,GAAIoB,cAAUZ,MAAOtD,EAAUkD,OAAQ,SAC1DoB,EAAW,GAAD,mBAAKD,GAAL,CAAcY,QAmBhB,kBAAC9D,EAAA,EAAD,KACKkD,EAAQT,KAAI,SAAAJ,GAAE,OAAI,kBAAC,EAAD,CAAQK,IAAKL,EAAGV,GACRM,MAAOA,EACPC,OAAQG,EACRrB,iBAAkBA,EAClBC,WAAYA,EACZC,SAAUA,WC/ErC6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a2009249.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {Button, Col, Input, Label, Modal, ModalBody, ModalFooter, ModalHeader, Row} from 'reactstrap';\n\nfunction AddTaskModal(props) {\n\n    const [isModalOpen, setIsModalOpen] = useState(false);\n\n    const [newTitle, setNewTitle] = useState('');\n\n    const [newPriority, setNewPriority] = useState(1);\n\n    const [newStatus, setNewStatus] = useState('TO DO');\n\n    const addButtonHandler = () => {\n        setIsModalOpen(false);\n        props.addNewTask(newTitle, newPriority, newStatus);\n        setNewPriority('');\n    };\n\n    return (\n        <>\n            <Button onClick={() => setIsModalOpen(true)}>Add new task</Button>\n            <Modal isOpen={isModalOpen}>\n                <ModalHeader>Add new task</ModalHeader>\n                <ModalBody>\n                    <Label>New Title</Label>\n                    <Input type=\"text\" value={newTitle} onChange={e => setNewTitle(e.target.value)}/>\n\n                    <Row>\n                        <Col>\n                            <Label>priority</Label>\n                            <Input type=\"select\" value={newPriority} onChange={e => setNewPriority(e.target.value)}>\n                                <option value={0}>Low</option>\n                                <option value={1}>Medium</option>\n                                <option value={2}>High</option>\n                            </Input>\n                        </Col>\n\n                        <Col>\n                            <Label>status</Label>\n                            <Input type=\"select\" value={newStatus} onChange={e => setNewStatus(e.target.value)}>\n                                <option value={'TO DO'}>To do</option>\n                                <option value={'IN PROGRESS'}>In progress</option>\n                                <option value={'REVIEW'}>Review</option>\n                                <option value={'DONE'}>Done</option>\n                            </Input>\n                        </Col>\n\n                    </Row>\n                </ModalBody>\n                <ModalFooter>\n                    <Button onClick={addButtonHandler}>Submit</Button>\n                    {' '}\n                    <Button onClick={() => setIsModalOpen(false)}>Cancel</Button>\n                </ModalFooter>\n            </Modal>\n        </>\n    );\n}\n\nexport default AddTaskModal;\n","import React, {useState} from 'react';\nimport {Alert, Button, Card, CardBody, Col, Input} from 'reactstrap';\n\n\nconst trash = (<svg className=\"bi bi-trash\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\"\n                    xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n        d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\"/>\n    <path fillRule=\"evenodd\"\n          d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"/>\n</svg>)\n\nconst pen = (<svg className=\"bi bi-pencil\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\"\n                  xmlns=\"http://www.w3.org/2000/svg\">\n    <path fillRule=\"evenodd\"\n          d=\"M11.293 1.293a1 1 0 0 1 1.414 0l2 2a1 1 0 0 1 0 1.414l-9 9a1 1 0 0 1-.39.242l-3 1a1 1 0 0 1-1.266-1.265l1-3a1 1 0 0 1 .242-.391l9-9zM12 2l2 2-9 9-3 1 1-3 9-9z\"/>\n    <path fillRule=\"evenodd\"\n          d=\"M12.146 6.354l-2.5-2.5.708-.708 2.5 2.5-.707.708zM3 10v.5a.5.5 0 0 0 .5.5H4v.5a.5.5 0 0 0 .5.5H5v.5a.5.5 0 0 0 .5.5H6v-1.5a.5.5 0 0 0-.5-.5H5v-.5a.5.5 0 0 0-.5-.5H3z\"/>\n</svg>)\n\nfunction Task(props) {\n    const {task, changeTaskStatus, deleteTask, editTodo} = props;\n\n    const [editTask, setEditTask] = useState(task.name);\n    const [isEditMode, setIsEditMode] = useState(false);\n\n    const alertColors = ['success', 'warning', 'danger'];\n\n    const onDelete = () => {\n        deleteTask(task.id);\n    };\n\n    const editButtonHandler = () => {\n        editTodo(task.id, editTask);\n        setIsEditMode(false);\n    };\n\n    return (\n        <div>\n            <Col>\n                <div>\n                    <Card>\n                        <CardBody>\n\n\n                            {isEditMode ? (\n                                <>\n                                    <Input type=\"text\" value={editTask} onChange={e => setEditTask(e.target.value)}/>\n                                    <Button size=\"sm\" onClick={editButtonHandler}>Save</Button>\n                                </>\n                            ) : (\n                                <>\n                                    {task.name}\n                                    <div>\n                                        <Button size=\"sm\" onClick={() => setIsEditMode(true)}>{pen}</Button>\n                                        <Button size=\"sm\" onClick={onDelete}>{trash}</Button>\n                                    </div>\n                                </>\n                            )}\n\n                            <hr/>\n                            <Alert color={alertColors[task.priority]}>\n                                {task.priority}\n                                {task.priority !== 2 &&\n                                <Button size=\"sm\" onClick={() => changeTaskStatus(task.id, 'up')}>↑</Button>\n                                }\n                                {' '}\n                                {task.priority !== 0 &&\n                                <Button size=\"sm\" onClick={() => changeTaskStatus(task.id, 'down')}>↓</Button>}\n                            </Alert>\n\n\n                        </CardBody>\n                        <CardBody>\n                            {task.status !== 'TO DO' &&\n                            <Button onClick={() => changeTaskStatus(task.id, 'left')}>←</Button>}\n                            {task.status !== 'DONE' &&\n                            <Button onClick={() => changeTaskStatus(task.id, 'right')}>→</Button>}\n                        </CardBody>\n                    </Card>\n                </div>\n            </Col>\n        </div>\n    );\n}\n\nexport default Task;\n","import React from 'react';\nimport {Col} from 'reactstrap';\nimport Task from \"./Task\";\n\nfunction Column(props) {\n\n  const {tasks, column, changeTaskStatus, deleteTask, editTodo} = props;\n\n  return (\n      <div>\n        <Col>\n          <h5>{column.title}</h5>\n          {tasks.filter(el => el.status === column.status)\n              .sort((a, b) => b.priority - a.priority)\n              .map(el => <Task key={el.id}\n                               task={el}\n                               changeTaskStatus={changeTaskStatus}\n                               deleteTask={deleteTask}\n                               editTodo={editTodo}/>)}\n\n        </Col>\n\n      </div>\n  );\n}\n\nexport default Column;\n","import React, {useState} from 'react';\nimport {Button, Col, Input, Label, Modal, ModalBody, ModalFooter, ModalHeader, Row} from 'reactstrap';\n\nfunction AddColumnModal(props) {\n\n    const [isModalOpen, setIsModalOpen] = useState(false);\n\n    const [newTitle, setNewTitle] = useState('');\n\n\n    const addButtonHandler = () => {\n        setIsModalOpen(false);\n        props.addNewColumn(newTitle);\n    };\n\n    return (\n        <>\n            <Button onClick={() => setIsModalOpen(true)}>Add new column</Button>\n            <Modal isOpen={isModalOpen}>\n                <ModalHeader>Add new column</ModalHeader>\n                <ModalBody>\n                    <Label>New Title</Label>\n                    <Input type=\"text\" value={newTitle} onChange={e => setNewTitle(e.target.value)}/>\n\n                </ModalBody>\n                <ModalFooter>\n                    <Button onClick={addButtonHandler}>Submit</Button>\n                    {' '}\n                    <Button onClick={() => setIsModalOpen(false)}>Cancel</Button>\n                </ModalFooter>\n            </Modal>\n        </>\n    );\n}\n\nexport default AddColumnModal;\n","import React, {useState} from 'react';\nimport './App.css';\nimport AddTaskModal from \"./AddTaskModal\";\nimport Column from \"./Column\";\nimport {v4 as uuidv4} from 'uuid';\nimport {Container, Row} from 'reactstrap';\nimport AddColumnModal from \"./AddColumnModal\";\n\nfunction App() {\n\n    const initialTasks = [\n        {id: uuidv4(), name: 'Do homework', status: 'TO DO', priority: 1},\n        {id: uuidv4(), name: 'Do laundry', status: 'IN PROGRESS', priority: 3},\n        {id: uuidv4(), name: 'Make an appointment', status: 'REVIEW', priority: 1},\n        {id: uuidv4(), name: 'Call Mom', status: 'DONE', priority: 2},\n        {id: uuidv4(), name: 'Cleaning', status: 'TO DO', priority: 3},\n        {id: uuidv4(), name: 'Learn React', status: 'IN PROGRESS', priority: 1},\n        {id: uuidv4(), name: 'Go shopping', status: 'REVIEW', priority: 2},\n        {id: uuidv4(), name: 'Watch lecture', status: 'DONE', priority: 1},\n    ];\n\n    const [tasks, setTasks] = useState(initialTasks);\n\n    const columnList = [\n        {id: uuidv4(), title: 'TO DO', status: 'TO DO'},\n        {id: uuidv4(), title: 'IN PROGRESS', status: 'IN PROGRESS'},\n        {id: uuidv4(), title: 'REVIEW', status: 'REVIEW'},\n        {id: uuidv4(), title: 'DONE', status: 'DONE'},\n\n    ];\n\n    const [columns, setColumns] = useState(columnList);\n\n    const statuses = ['TO DO', 'IN PROGRESS', 'REVIEW', 'DONE'];\n\n    const priorities = [0, 1, 2];\n\n\n\n    const changeTaskStatus = (taskId, direction) => {\n        const newTasks = tasks.map(el => {\n            if (el.id === taskId) {\n                if (direction === 'right') el.status = statuses[statuses.indexOf(el.status) + 1];\n                if (direction === 'left') el.status = statuses[statuses.indexOf(el.status) - 1];\n                if (direction === 'up') el.priority = priorities[priorities.indexOf(el.priority) + 1];\n                if (direction === 'down') el.priority = priorities[priorities.indexOf(el.priority) - 1];\n            }\n            return el;\n        })\n        setTasks(newTasks);\n    };\n\n    const addNewTask = (newName, newPriority, newStatus) => {\n        const newTask = {id: uuidv4(), name: newName, status: newStatus, priority: newPriority};\n        setTasks([...tasks, newTask]);\n    };\n\n    const deleteTask = (taskId) => {\n        const newTask = tasks.filter(el => el.id !== taskId);\n        setTasks(newTask);\n    };\n\n\n\n    const addNewColumn = (newTitle, newStatus) => {\n        const newColumn = {id: uuidv4(), title: newTitle, status: 'TO DO' };\n        setColumns([...columns, newColumn]);\n    };\n\n    const editTodo = (id, newName) => {\n        const newList = [...tasks].map(el => {\n                if (el.id === id)\n                    return {...el, name: newName}\n                return el\n            })\n            setTasks(newList);\n\n    }\n    return (\n        <div className=\"App\">\n\n            <Container>\n\n                <AddTaskModal addNewTask={addNewTask}/>\n                <AddColumnModal addNewColumn={addNewColumn}/>\n                <Row>\n                    {columns.map(el => <Column key={el.id}\n                                               tasks={tasks}\n                                               column={el}\n                                               changeTaskStatus={changeTaskStatus}\n                                               deleteTask={deleteTask}\n                                               editTodo={editTodo}/>)}\n                    {/*<Column tasks={tasks} title={'TO DO'} changeTaskStatus={changeTaskStatus}/>*/}\n                    {/*<Column tasks={tasks} title={'IN PROGRESS'} changeTaskStatus={changeTaskStatus}/>*/}\n                    {/*<Column tasks={tasks} title={'REVIEW'} changeTaskStatus={changeTaskStatus}/>*/}\n                    {/*<Column tasks={tasks} title={'DONE'} changeTaskStatus={changeTaskStatus}/>*/}\n                </Row>\n\n\n            </Container>\n\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}